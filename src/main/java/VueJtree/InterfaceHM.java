/*
 * Projet L3 STRI 
 * Device Manager
 *
 */

package VueJtree;

/* package interne */

import Metier.*;
import BaseDeDonnees.*;
import java.awt.Color;
import java.util.ArrayList;

/* autres import */

import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author E.MENAT - G.RIBAGNAC - N.ROQUES - M.TEIKITUHAAHAA
 * 
 * Cette classe défini les batiments pouvant contenir des salles
 * dans la gestion d'un système informatique.
 * 
 * @version 1.0, 2015, UPS.
 */

public class InterfaceHM extends javax.swing.JFrame {

    DefaultTreeModel arbreModele;
    
    /**
     * Creates new form test
     */
    public InterfaceHM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPaneTreeTest = new javax.swing.JScrollPane();
        jTreeTest = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonTree = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Bievenue sur Device Manager");
        jTreeTest.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeTest.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeTestValueChanged(evt);
            }
        });
        jScrollPaneTreeTest.setViewportView(jTreeTest);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Manavai\\workspace\\Projet-Java-L3-STRI\\src\\main\\java\\VueJtree\\logo_stri.png")); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jButtonTree.setBackground(new java.awt.Color(204, 0, 51));
        jButtonTree.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jButtonTree.setText("Connecter");
        jButtonTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTreeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonTree, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setText("Device Manager v1.0");

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Université Paul Sabatier - UPPSITECH - STRI - Copyright \u00a9 2015");
        jLabel3.setToolTipText("");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("******************************************************************\n*\t\tBienvenue sur Device Manager v1.0\t         *\n******************************************************************\n\nLa description des objets sélectionnés dans l'arborescence s'af\n- ficheront ici.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(86, 86, 86)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPaneTreeTest, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPaneTreeTest))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTreeActionPerformed
        // TODO add your handling code here:
        
       /* Connexion à la base de donnée si déconnecté */
        if(jButtonTree.getText() == "Connecter")
        {
            jButtonTree.setText("Deconnecter");
            jButtonTree.setBackground(Color.green);
            
            
            
        }
        else
        {
            jButtonTree.setText("Connecter");
            jButtonTree.setBackground(Color.red);
        }
        
       
         	
        /* Ajout de noeuds fils et des feuilles dans les noeuds fils : */
        /* 
            Le nom de la racine correspond au nom de la base de donnéee.
            On récupère donc le nom de la base de donnée.
        */
       
        DefaultMutableTreeNode racine3 = new DefaultMutableTreeNode("Etablissement");
        
        arbreModele = new DefaultTreeModel(racine3);
        
        // Comportement des noeuds sans fils mais pouvant posséder des enfants : 
        arbreModele.setAsksAllowsChildren(true);
        JTree monArbre3 = new JTree(arbreModele); 
   
        DefaultMutableTreeNode Jtree_batiment;
        DefaultMutableTreeNode Jtree_Salle;
        DefaultMutableTreeNode v;
        
        /***************************************************/
        
        // rqt sql pour récupérer les batiments et tous les informations
        
        
        
        /* création de batiment pour test */
        
         ArrayList<Batiment> batiments = new ArrayList<>();
         
        for(int i = 0; i < 3; ++i)
        {
            batiments.add(new Batiment("Batiment N° "+i));
            batiments.get(i).addSalle(new Salle("Test "));  
        }
        
        
        
        
        
        
        
        
        
        
        
        
        /***************************************************/
        for(Batiment b: batiments)
        {
            Jtree_batiment = new DefaultMutableTreeNode();
            Jtree_batiment.setUserObject(b);
           // for( int j = 0; j < 2*i; ++j)
            for(Salle s: b.getSalles())
            {
                Jtree_Salle = new DefaultMutableTreeNode();
                Jtree_Salle.setUserObject(s);
             
                // traitement Jtree des machines d'une salles
                if(s.getMachines().isEmpty() == false) // salles avec des machines
                {
                    for(Machine m: s.getMachines())
                    {
                        FeuilleJTree f = new FeuilleJTree("Test"); // ici les machiens de la salles
                        v = new DefaultMutableTreeNode(f, false);
                        v.setUserObject(f);

                        Jtree_Salle.add(v); Jtree_batiment.add(Jtree_Salle); // ajout des dev à la salle; ajout des salles aux 
                    }
                }
                else                                    // salles sans machines
                {
                    FeuilleJTree f = new FeuilleJTree("Test"); // ici les machiens de la salles
                    v = new DefaultMutableTreeNode(f, false);
                    v.setUserObject(f);
                }
                
                // traitement des Equipements Ordinateurs
                
                // traitement des Equipements réseaux d'une salle
                
                // traitement des Equipements sans fils
                
               
                
                Jtree_batiment.add(Jtree_Salle);
            }
            
            racine3.add(Jtree_batiment); // ajout des batiment à la racine
        }
        
        
        
        
        
        
        TreeModel modele = monArbre3.getModel();
        
        
        // On ajoute notre modèle au JTree déjà existant par défaut :
        jTreeTest.setModel(modele);
        
        
        TreeModel m = jTreeTest.getModel();
        Object o = m.getRoot();
        DefaultMutableTreeNode oo;
        
        // Essai de reperer un élément parmi la liste des noeuds suivant le noeud root : 
        int numberOfNodes = m.getChildCount(o);
        String nomNoeud;
        for(int i = 0; i<numberOfNodes; i++)
        {
            oo = (DefaultMutableTreeNode)m.getChild(o, i);
            nomNoeud = oo.toString();
            if(nomNoeud.equals("fils N° 2"))
            {
                System.out.println(nomNoeud);
                System.out.println("OK");
                // Récuprétion de l'index correspond à la recherche utilisateur : Ajout d'un noeud feuille.
                oo.add(new DefaultMutableTreeNode("OK"));
                // + Ajout d'un noeud (différent d'une feuille => noeud sans fils 
                DefaultMutableTreeNode add = new DefaultMutableTreeNode("Noeud_Fils_OK");
                add.add(new DefaultMutableTreeNode("OK", false));
                oo.add(add);
            }
        }
        
 /*       oo = (DefaultMutableTreeNode)m.getChild(o, 1);
        oo.add(new DefaultMutableTreeNode("Test01111", false));
        
        TreeNode t = racine3.getChildAt(1);
        System.out.println(t.toString());
        
        racine3.add(new DefaultMutableTreeNode("Test"));
        
        // Ajout de fils à un noeud initialement feuille : 
        DefaultMutableTreeNode last = (DefaultMutableTreeNode)m.getRoot();
        last = (DefaultMutableTreeNode)last.getLastChild();
        last.add(new DefaultMutableTreeNode("Tree", false));
        
        // Ajout d'un noeud sans fils au préalable mais considéré comme noeud pouvant posséder des enfants : 
        racine3.add(new DefaultMutableTreeNode("NWithinChild", true)); */
        
        
        
        // On active les modifications sur le Jtree + Sélection unique d'un noeud, pas de multi-selection : 
        jTreeTest.setEditable(true);
        jTreeTest.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        /* Test événement JTree : */
        // Edite la zone sans appuyer sur la touche entrer : 
        // jTreeTest.setInvokesStopCellEditing(true);
        
        
        // Ajout d'un listener permettant de détecter les changements réaliser sur un noeud : 
        modele.addTreeModelListener(new TreeModelListener() {

           
            @Override
            public void treeNodesChanged(TreeModelEvent e) {
                System.out.println("Valeur modifiée !");
                System.out.println(e.getChildren()[0].toString());
                // arbreModele.reload();
            }

            @Override
            public void treeNodesInserted(TreeModelEvent e) {
                
            }

            @Override
            public void treeNodesRemoved(TreeModelEvent e) {
                System.out.println("Noeud supprimé !");
                System.out.println(e.getTreePath().toString());
            }

            
            @Override
            public void treeStructureChanged(TreeModelEvent e) {
                System.out.println("Structure changed");
                System.out.println(e.getTreePath().toString());
                
            }
            
            
        });
        
        /* Listener lors de la sélection d'un noeud, on veut afficher ses informations */
        
        
        jTreeTest.addTreeSelectionListener(new TreeSelectionListener() {

           @Override
           public void valueChanged(TreeSelectionEvent e) {
              jTextArea1.setText(e.getPath().getLastPathComponent().toString()); // affichage dans textfield des propriété de l'objet.
           }
       });
     
        /* lors de l'expansion d'un noeud, on veut actualiser les données
            en interrogeant la BD.
        */
        jTreeTest.addTreeExpansionListener(new TreeExpansionListener() {

            @Override
            public void treeExpanded(TreeExpansionEvent event) {
                /* codes lors de l'expand d'un noeud */
                String node = event.getPath().getLastPathComponent().toString();
                
                System.out.println(event.getPath().getLastPathComponent().toString()); // affiche le l'élément expand
                
                
            }

            @Override
            public void treeCollapsed(TreeExpansionEvent event) {
                /* codes lors d'un collpase d'un noeud */
                String node = event.getPath().getLastPathComponent().toString();
                
                System.out.println(event.getPath().getLastPathComponent().toString()); // affiche le l'élément expand
                
                
            }
        });
        
        /* Modifier le rendu d'un JTree en fonction des éléments noeuds ou feuilles : 
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        renderer.setClosedIcon(new ImageIcon("src/main/java/checked.gif"));
        renderer.setOpenIcon(new ImageIcon("src/main/java/unchecked.gif"));
        renderer.setLeafIcon(new ImageIcon("src/main/java/ordi.png"));
        jTreeTest.setCellRenderer(renderer);
        */
        
        /* On cache le noeud racine : 
        jTreeTest.setRootVisible(false);
        */
        
        /* Modifier le rendu de chaque noeu d'un Jtree en fonction de sa hiérarchie : */
        jTreeTest.setCellRenderer(new RenduJtree());
        
        arbreModele.reload();
        
    }//GEN-LAST:event_jButtonTreeActionPerformed

    private void jTreeTestValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeTestValueChanged
        // Evenement : Se déclenche à chaque sélection/désélection d'un élément de l'arbre :
        
        /* si l'on change une valeur dans le Jtree, on reporte la modif dans la BD */
        
      
        System.out.print(evt.getPath().getLastPathComponent().toString());   System.out.println(": Value changed");
        
    }//GEN-LAST:event_jTreeTestValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new InterfaceHM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneTreeTest;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTreeTest;
    // End of variables declaration//GEN-END:variables
}
